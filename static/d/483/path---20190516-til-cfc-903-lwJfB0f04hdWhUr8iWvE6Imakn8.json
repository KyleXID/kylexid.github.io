{"data":{"post":{"id":"3010c567-c4e3-57b4-8891-980627746a23","html":"<h1>조건문을 쓸때 pass와 return의 차이 feat.continue,break</h1>\n<ul>\n<li>\n<p>pass : 단순히 지나가는 역할, 행 이하의 라인의 코드들을 실행함.</p>\n<ul>\n<li>일반적으로 함수나 클래스의 구현을 미룰 때 쓴다.</li>\n</ul>\n</li>\n<li>continue : loop에서 현재 행 이하의 구문은 실행 하지 않고, loop의 시작지점으로 돌아갈 경우 사용</li>\n<li>break : loop 하나를 빠져나올 때 쓴다. 만약 이중 loop면 내부 loop만 빠져나온다는 뜻</li>\n</ul>\n<p>codekata를 풀면서 잘못 알고 있는 점을 찾을 수 있어서 매우 좋은 경험이었다.  </p>\n<p>재귀함수 코드카타를 풀면서 스트링을 하나씩 pop해서 새로운 배열에 넣어주는 코딩을 했는데, 이때 기존 스트링의 길이가 0이 될 경우 난 pass를 사용했다.<br>\n단순히 pass쓰면 알아서 나갈꺼라고 착각해버린것,,,,,  </p>\n<p>하지만 여기서 pass를 사용하면 아래의 else 조건문을 타게되면서 아무것도 없는 Nonetype이 재귀함수로 또 들어가게 되면서 에러가 발생하게 된다.</p>\n<p>스트링의 길이가 0이 되면 단순히 비어있는 값을 return 해주면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">reverseString</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">''</span>\n  <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span>\n    a <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>reverseString<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>reverseString<span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>","fields":{"slug":"/20190516TIL/","prefix":"2019-05-16"},"frontmatter":{"title":"pass,return,continue,break","author":"KyleXID","category":"TIL","cover":{"childImageSharp":{"resize":{"src":"/static/django-logo-negative-1d528e2cb5fbc29ad16c74e5d883c371-160fa.png"}}}}},"authornote":{"id":"23c79ddc-82aa-5899-b07b-ef138c6177bc","html":"<p><strong>KyleXID</strong> 파이썬,장고를 기반으로 개발하고있는 백엔드 개발자입니다.<br>\n현재 P2P금융 업체에서 웹개발을 맡고 있습니다.</p>"},"site":{"siteMetadata":{"facebook":{"appId":"2287464308006637"}}}},"pageContext":{"slug":"/20190516TIL/","prev":{"id":"4963333e-80ad-5b91-a7a6-1260a8daa23e","fields":{"slug":"/20190515-bubble_sort/","prefix":"2019-05-15","source":"posts"},"frontmatter":{"title":"버블 정렬(Bubble Sort)","category":"Algorithm"}},"next":{"id":"3bcc5857-ea89-5722-807d-e637554eae6c","fields":{"slug":"/20190516-algorithm_Recursion/","prefix":"2019-05-16","source":"posts"},"frontmatter":{"title":"재귀(Recursion)","category":"Algorithm"}},"source":"posts"}}