{"data":{"post":{"id":"1352124f-635f-5e66-b43b-ce84af24b249","html":"<h1>Queryset의 반복구문을 지우는 방법</h1>\n<p>나의 경우에는 유저들이 좋아한 M2M 테이블에서 값을 추출해오면서 해당 테이블에 존재하는 이미지id들이 한개씩만 필요했기때문에 중복된 이미지 id들을 지워주어야했다.  </p>\n<p>이 경우에는 <code class=\"language-text\">distinct()</code>를 이용하여 중복된 값들을 지워줄 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">heart_list <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>Cloth<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token string\">'hearts__id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token string\">'pk'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>distinct<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<br/>\n<h1>list속 dictionary 정렬하기</h1>\n<p>나는 반복구문을 지운 후에 <code class=\"language-text\">heart_list</code>에 존재하는 이미지들의 heart 값에 따른 순위를 나타내기 위한것이 목적이었으므로 heart값에 따라 정렬을 해야했다.  </p>\n<p>다양한 방법이 있지만, 나의경우는 python의 <code class=\"language-text\">itemgetter</code>를 사용했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> operator <span class=\"token keyword\">import</span> itemgetter\n\n                <span class=\"token punctuation\">.</span>\n                <span class=\"token punctuation\">.</span>\n                <span class=\"token punctuation\">.</span>\n    total_hearts_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n\t\t\t <span class=\"token punctuation\">{</span><span class=\"token string\">\"img_id\"</span> <span class=\"token punctuation\">:</span> d<span class=\"token punctuation\">[</span><span class=\"token string\">'pk'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t\t\t  <span class=\"token string\">\"total_hearts\"</span> <span class=\"token punctuation\">:</span> Cloth<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> d<span class=\"token punctuation\">[</span><span class=\"token string\">'pk'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>total_hearts<span class=\"token punctuation\">}</span> <span class=\"token keyword\">for</span> d <span class=\"token keyword\">in</span> hearts_list<span class=\"token punctuation\">]</span>\n    data\t      <span class=\"token operator\">=</span> <span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>total_hearts_list<span class=\"token punctuation\">,</span> key <span class=\"token operator\">=</span> itemgetter<span class=\"token punctuation\">(</span><span class=\"token string\">'total_hearts'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">total_hearts_list</code>라는 list에서 key가 <code class=\"language-text\">totla_hearts</code>인 값들을 오름차순으로 정렬한 code이다.\n<code class=\"language-text\">itemgetter</code>에는 하나 이상의 값을 넣어서 순서대로 정렬시킬 수 있다.</p>\n<h1>UnitTest 노트 정리</h1>\n<ul>\n<li>\n<p>UI</p>\n<ul>\n<li>실제 유저가 사용하듯이 테스트</li>\n</ul>\n</li>\n<li>\n<p>integration</p>\n<ul>\n<li>간단한 규모로 한 서버,한 서비스만 테스트</li>\n</ul>\n</li>\n<li>\n<p>Unit</p>\n<ul>\n<li>더 작은 규모, 함수를 테스트</li>\n</ul>\n</li>\n<li>\n<p>UI 까다로운 이유 : 실행하기 어려움, 프론트,백이 모두 완성되어야함, 마치 배포한 상태가 되야하기 때문, 버그를 발견하기 힘듬</p>\n</li>\n<li>\n<p>intergration : 그 다음으로 공수가 많이 든다.</p>\n</li>\n<li>\n<p><strong>unit test</strong> : 가장 쉬움/자동화가 쉬움, 파악이 쉽다.</p>\n<ul>\n<li>Test code를 짜는것이 매우 중요함.</li>\n<li>개발과 unit test 비중은 5:5 로 두는게 이상적임.</li>\n<li>방패역할, 익숙해져야한다.</li>\n</ul>\n</li>\n</ul>\n<h3>용어</h3>\n<ul>\n<li>\n<p>TestCase</p>\n</li>\n<li>\n<p>Fixture</p>\n</li>\n<li>\n<p>assertion</p>\n</li>\n<li>\n<p><code class=\"language-text\">if __name__ == &#39;__main__&#39;</code>:</p>\n<ul>\n<li>특별변수(파이썬이 갖고있는 변수) : 자동으로 파일 이름 혹은 모듈 이름으로 지정</li>\n<li>부를때 name이 파일이름으로 됨</li>\n<li>import했을때 호출되는걸 방지하기위함</li>\n</ul>\n</li>\n<li>\n<p>중복을 방지하기 위해 setup, teardown</p>\n</li>\n<li>\n<p>테스트를 청소한다는 목적으로 사용한다.</p>\n</li>\n<li>\n<p>setup() : 사전 준비 작업, clean up 처리 :  tearDown()</p>\n</li>\n</ul>\n<h3>원칙</h3>\n<ul>\n<li>\n<p>반드시 독립적이어야 한다.</p>\n</li>\n<li>\n<p>전체 테스트가 짧아야한다. 몇분 안에 완료 되어야함.</p>\n</li>\n<li>\n<p>각 앱에 테스트 디렉토리만들어서 수행한다.</p>\n</li>\n<li>\n<p><strong>0,-1,1을 기억하자!</strong>  </p>\n<ul>\n<li>\n<p>1 : happy path <em>ex)c = add(2,3) // c==5</em></p>\n</li>\n<li>\n<p>-1 : 의도한 exception이 나오는지 확인하는 것  </p>\n</li>\n<li>\n<p>0 : 이렇게는 안쓸것같지만 해보는 것 </p>\n</li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/20190507TIL/","prefix":"2019-05-07"},"frontmatter":{"title":"Queryset의 반복구문 지우기, UnitTest 정리, List속 Dictionary 정렬","author":"KyleXID","category":"TIL","cover":{"childImageSharp":{"resize":{"src":"/static/django-logo-negative-1d528e2cb5fbc29ad16c74e5d883c371-160fa.png"}}}}},"authornote":{"id":"23c79ddc-82aa-5899-b07b-ef138c6177bc","html":"<p><strong>KyleXID</strong> 파이썬,장고를 기반으로 개발하고있는 백엔드 개발자입니다.<br>\n현재 P2P금융 업체에서 웹개발을 맡고 있습니다.</p>"},"site":{"siteMetadata":{"facebook":{"appId":"2287464308006637"}}}},"pageContext":{"slug":"/20190507TIL/","prev":{"id":"b766930c-6752-54cb-a447-91424b6d2f3a","fields":{"slug":"/20190506TIL/","prefix":"2019-05-06","source":"posts"},"frontmatter":{"title":"ManyToMany테이블 value 추출,query to json, list of dictionaty","category":"TIL"}},"next":{"id":"7d24f5de-9765-5037-abba-bf7afbb388a0","fields":{"slug":"/20190508TIL/","prefix":"2019-05-08","source":"posts"},"frontmatter":{"title":"float,int 차이, json인코딩, 디코딩, json(), M2M테이블 컬럼 추가","category":"TIL"}},"source":"posts"}}