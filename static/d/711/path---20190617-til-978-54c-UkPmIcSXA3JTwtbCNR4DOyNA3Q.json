{"data":{"post":{"id":"cb77c589-2633-5bd7-bf45-941d2f31e9c0","html":"<h3>파이썬 remind</h3>\n<ul>\n<li>정수 홀수 구분 <code class=\"language-text\">x%2 == 1</code> 홀수, <code class=\"language-text\">x%2 == 0</code> 짝수이다. (나머지로 판별)</li>\n<li>float, int의 차이, 4.0과 4의 차이이다. <code class=\"language-text\">float</code>는 실수, <code class=\"language-text\">int</code>는 정수를 나타낸다.</li>\n</ul>\n<h3>장고 remind</h3>\n<ul>\n<li><code class=\"language-text\">filter</code>로 가져온 쿼리문들은 for문으로 하나하나 접근할 시 바로 딕셔너리 형태처럼 키값으로 접근 할 수 있다.</li>\n<li><code class=\"language-text\">get</code> 또는 <code class=\"language-text\">filter[0]</code>, <code class=\"language-text\">filter.first()</code>등으로 가져온 아이들은 <code class=\"language-text\">__dict__</code>로 변환하여 키값으로 접근할 수 있다.</li>\n<li>filter로 가져오는 쿼리 데이터가 많을 경우에 <code class=\"language-text\">iterator()</code>를 사용하자. 무조건 쓰는건 아니고, 데이터의 양이 많은 경우에 쓰도록하자. <code class=\"language-text\">iterator()</code>의 경우에는 한번 추출하면 사라지므로 사용하는 상황을 제대로 판단하여 사용하자.</li>\n<li>\n<p>장고 update할 시 get과 filter의 차이</p>\n<ul>\n<li>get: .update() 사용 불가, 해당 변수에 접근하여 값을 할당하고 <code class=\"language-text\">save(update_fields=&#39;~&#39;, ...)</code> 형식으로 해주어야 한다.</li>\n<li>filter: <code class=\"language-text\">Post.objects.filter(id=?).update(...)</code> 로 update 가능하다.</li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://docs.djangoproject.com/en/2.2/ref/models/querysets/#update-or-create\">update<em>or</em>create</a></p>\n<ul>\n<li>장고 1.7 이상부터 지원하는 메서드이다.</li>\n</ul>\n</li>\n</ul>\n<h3>장고 디버그 툴 바</h3>\n<ul>\n<li>장고 디버그 툴바를 통해 쿼리를 효과적으로 사용하고있는지, 중복은 없는지 파악할 수 있다.<br>\n<a href=\"http://raccoonyy.github.io/using-django-querysets-effectively-translate/index.html\">장고 효과적으로 사용하기-raccoony님 블로그</a><br>\n<a href=\"http://raccoonyy.github.io/using-django-querysets-effectively-translate/index.html\">장고 디버그 툴바</a></li>\n</ul>\n<h3>soft<em>delete, hart</em>delete</h3>\n<ul>\n<li>hard_delete: 데이터를 아예 삭제하는 것</li>\n<li>\n<p>soft_delete: 데이터를 지웠다고 표시만 해주는 것. 실제 데이터는 남아있다.</p>\n<ul>\n<li>일반적으로 데이터는 안지우고 지웠다고 표시해주는 soft_delete 방식이 자주 쓰인다.</li>\n</ul>\n</li>\n</ul>\n<h3>RESTful API개발 시 DELETE 메서드</h3>\n<ul>\n<li>RESTful API 개발시 삭제엔드포인트를 만들 경우 DELETE 메서드를 사용하는 것이 RESTful API적인 개발 방식이고, 깔끔하다.</li>\n<li>굳이 사용을 강요할 필요는 없다. 큰 범위내에서는 post에 포함되기 때문에, 따로 post로 새로운 엔드포인트를 만들어도 무관하다.</li>\n</ul>","fields":{"slug":"/20190617TIL/","prefix":"2019-06-17"},"frontmatter":{"title":"20190617 TIL","author":"KyleXID","category":"TIL","cover":null}},"authornote":{"id":"23c79ddc-82aa-5899-b07b-ef138c6177bc","html":"<p><strong>KyleXID</strong> 파이썬,장고를 기반으로 개발하고있는 백엔드 개발자입니다.<br>\n현재 P2P금융 업체에서 웹개발을 맡고 있습니다.</p>"},"site":{"siteMetadata":{"facebook":{"appId":"2287464308006637"}}}},"pageContext":{"slug":"/20190617TIL/","next":{"id":"04634699-6da9-5301-a374-1587c8661b07","fields":{"slug":"/20190618TIL/","prefix":"2019-06-18","source":"posts"},"frontmatter":{"title":"20190618 TIL","category":"TIL"}},"source":"posts"}}