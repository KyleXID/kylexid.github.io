{"data":{"post":{"id":"b766930c-6752-54cb-a447-91424b6d2f3a","html":"<h1>ManyToMany테이블에서 value값에 접근하는 방법</h1>\n<p>프로젝트를 하면서 ManyToMany테이블에 value값을 추출해야 하는 경우가 발생했다.\nManyToMany는 Clothes라는 모델에 종속되어 있고, User모델과 연결되어 있었다.<br>\n필요한 항목은 front에서 받은 유저정보로 접근하여 해당유저가 heart를 누른 이미지 리스트이다.  </p>\n<p>먼저 ManyToMany테이블은 다음과 같이 이루어져있다.  </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">+----------+---------+------+-----+---------+----------------+\n| Field    | Type    | Null | Key | Default | Extra          |\n+----------+---------+------+-----+---------+----------------+\n| id       | int(11) | NO   | PRI | NULL    | auto_increment |\n| cloth_id | int(11) | NO   | MUL | NULL    |                |\n| user_id  | int(11) | NO   | MUL | NULL    |                |\n+----------+---------+------+-----+---------+----------------+</code></pre></div>\n<p>검색을 통해 알게 된 M2M 테이블 접근방법은 <code class=\"language-text\">filter</code> 또는 <code class=\"language-text\">values</code>를 사용하여 __ (double underscore)를 통해 접근하는 방법이다.</p>\n<p>나의 경우는 Cloth에 종속된 heart M2M테이블이기 때문에 아래와 같이 접근했다.</p>\n<p><code class=\"language-text\">hearts_list = Cloth.objects.filter(hearts__id=user.id)</code></p>\n<p>이렇게 접근하면 해당 유저아이디를 갖고있는 M2M의 값들이 <code class=\"language-text\">hearts_list</code>에 저장된다.</p>\n<p><code class=\"language-text\">hearts__</code> 다음에 사용할 수 있는 값들은 연결된 User의 Field이다.</p>\n<p>여기서 Cloth의 Field의 값에 따라 데이터를 받아오고싶다면. 다음과 같이 입력하면 된다.</p>\n<p><code class=\"language-text\">Cloth.objects.all().values(&#39;hearts__id&#39;).values(&#39;pk&#39;)</code><br>\n<em>여기서 pk는 Cloth의 pk이다.</em></p>\n<p>위와 같이 값을 빼올 경우 값은 Queryset 형태로 오기때문에 JsonResponse로 보내주기 위해서는 json형태로 이를 변환시켜주어야한다.</p>\n<h2>1. django의 serializers를 통한 형태 변환</h2>\n<p>장고 내부의 serializers를 이용하면 형태를 변환시킬 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>core <span class=\"token keyword\">import</span> serializers\n\t\t<span class=\"token punctuation\">.</span>\n\t\t<span class=\"token punctuation\">.</span>\n\t\t<span class=\"token punctuation\">.</span>\n\t<span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'hearts_list'</span> <span class=\"token punctuation\">:</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>serializers<span class=\"token punctuation\">.</span>serialize<span class=\"token punctuation\">(</span><span class=\"token string\">'json'</span><span class=\"token punctuation\">,</span> hearts_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>다음과 같이 return해주면 정상적으로 JsonResponse로 반환이 가능하다.</p>\n<h2>2. list를 통한 형태 변환</h2>\n<p>간단한 방법으로 장고 내부의 list()를 써주면 바로 list형태로 변환이 된다.</p>\n<h1>M2M에서 추출한 데이터 정리하기</h1>\n<p>나의 경우에는 M2M에서 추출한 데이터를 list()를 통해 변환해도 내가 생각한 Key의 이름과는 많이 달랐다.<br>\n그래서 다시 추출한 데이터를 새로운 키의값에 배정시키는 작업을 진행하였다. 추가적으로 필요한 다른 정보도 넣어주었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span><span class=\"token string\">'img_id'</span> <span class=\"token punctuation\">:</span> d<span class=\"token punctuation\">[</span><span class=\"token string\">'pk'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n     <span class=\"token string\">'img_ref'</span> <span class=\"token punctuation\">:</span> d<span class=\"token punctuation\">[</span><span class=\"token string\">'img_ref'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n     <span class=\"token string\">'total_hearts'</span> <span class=\"token punctuation\">:</span> Cloth<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> d<span class=\"token punctuation\">[</span><span class=\"token string\">'pk'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>total_hearts<span class=\"token punctuation\">}</span> <span class=\"token keyword\">for</span> d <span class=\"token keyword\">in</span> hearts_list\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>다음과 같은 for문을 통하여 추출한 데이터를 내가 원하는 Key값으로 정리하였다.</p>\n<p>Before</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span><span class=\"token string\">'pk'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'img_ref'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'www'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span><span class=\"token string\">'pk'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'img_ref'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'www2'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span><span class=\"token string\">'pk'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'img_ref'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'www3'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span><span class=\"token string\">'pk'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'img_ref'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'www4'</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>After</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"img_id\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"img_ref\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"www4\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"total_hearts\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"img_id\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"img_ref\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"www3\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"total_hearts\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"img_id\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"img_ref\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"www2\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"total_hearts\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"img_id\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"img_ref\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"www\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"total_hearts\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>","fields":{"slug":"/20190506TIL/","prefix":"2019-05-06"},"frontmatter":{"title":"ManyToMany테이블 value 추출,query to json, list of dictionaty","author":"KyleXID","category":"TIL","cover":{"childImageSharp":{"resize":{"src":"/static/django-logo-negative-1d528e2cb5fbc29ad16c74e5d883c371-160fa.png"}}}}},"authornote":{"id":"23c79ddc-82aa-5899-b07b-ef138c6177bc","html":"<p><strong>KyleXID</strong> 파이썬,장고를 기반으로 개발하고있는 백엔드 개발자입니다.<br>\n현재 P2P금융 업체에서 웹개발을 맡고 있습니다.</p>"},"site":{"siteMetadata":{"facebook":{"appId":"2287464308006637"}}}},"pageContext":{"slug":"/20190506TIL/","prev":{"id":"3116a4ab-b989-5d14-8455-a86b36f10b71","fields":{"slug":"/20190503TIL/","prefix":"2019-05-03","source":"posts"},"frontmatter":{"title":"DATABASE, python list에 접근하기, git stash","category":"TIL"}},"next":{"id":"1352124f-635f-5e66-b43b-ce84af24b249","fields":{"slug":"/20190507TIL/","prefix":"2019-05-07","source":"posts"},"frontmatter":{"title":"Queryset의 반복구문 지우기, UnitTest 정리, List속 Dictionary 정렬","category":"TIL"}},"source":"posts"}}