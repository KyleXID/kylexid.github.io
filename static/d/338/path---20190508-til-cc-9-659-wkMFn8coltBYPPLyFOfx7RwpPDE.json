{"data":{"post":{"id":"7d24f5de-9765-5037-abba-bf7afbb388a0","html":"<h1>float, int의 차이</h1>\n<p>int는 정수형, float는 실수형이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.5</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">></span><span class=\"token number\">3</span>\n\n<span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.5</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">></span><span class=\"token number\">3.5</span>\n\n<span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">></span><span class=\"token number\">3</span>\n\n<span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">></span><span class=\"token number\">3.0</span></code></pre></div>\n<p><strong><em>자매품 연산자’/‘와 ’//’</em></strong><br>\n<em>/는 결과를 float로, //는 결과를 int로 나타낸다.</em></p>\n<br/>\n<h1>json 인코딩, 디코딩</h1>\n<p>python에서 dictionary, list, tuple과 같은 object들이 post 요청으로 왔을때, 이 값들은 해당 object 형태로 인식되지 않는다.\n실제 값은 단순히 object 처럼 생긴 string이 보내진다는 말이고, key값으로 접근을 할 수 없다는 말이다.</p>\n<p>이를 해당 object트 값으로 사용하기 위해 json 디코딩을 해주어야한다.</p>\n<p>json.loads()는 이를 디코딩 해주는 json 매서드이다.</p>\n<p>json.dumps는 이와 반대로 object들을 json형태로 인코딩 해주는 함수이다.</p>\n<br/>\n<h1>json()</h1>\n<p>json()는 response의 내장 method로 response의 body의 값을 가져와 보여주는 역할을 한다.\n<em>ex)response.json(), python은 타입별로 내장 method가 있다. 예를들어 list.slice()와 같은 것들..</em><br>\n그러므로 .json()을 한 값에 또 .json()을 할 수 없다.<br>\n이미 .json()으로 형태가 변환되었기 때문이다.  </p>\n<h1>M2M테이블에 컬럼 추가하기.</h1>\n<p><strong>앞으로 M2M테이블을 추가할때는 through를 이용하여 테이블을 미리 생성해놓자.</strong> 만약을 위해 M2M필드에 변동사항이 생길경우 수정하기가 매우 편해진다.</p>\n<p>이미 생성된 M2M에 컬럼을 추가하는 방법은 굉장히 번거롭다.  </p>\n<p>먼저 M2M이 종속된 모델에 새로운 연결관계를 생성해준다.<br>\n나의 경우는 </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">hearts      <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ManyToManyField<span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">,</span> related_name<span class=\"token operator\">=</span><span class=\"token string\">'hearts'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이 값을</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">hearts      <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ManyToManyField<span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">,</span> through<span class=\"token operator\">=</span><span class=\"token string\">'HeartTime'</span><span class=\"token punctuation\">,</span> related_name<span class=\"token operator\">=</span><span class=\"token string\">'hearts'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이렇게 바꾸고 </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">HeartTime</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n    cloth <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ForeignKey<span class=\"token punctuation\">(</span>Cloth<span class=\"token punctuation\">,</span> on_delete<span class=\"token operator\">=</span>models<span class=\"token punctuation\">.</span>CASCADE<span class=\"token punctuation\">)</span>\n    user <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ForeignKey<span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">,</span> on_delete<span class=\"token operator\">=</span>models<span class=\"token punctuation\">.</span>CASCADE<span class=\"token punctuation\">)</span>\n    heart_time <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateTimeField<span class=\"token punctuation\">(</span>auto_now_add<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>                                                                                                                                        \n    \n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>                \n        db_table <span class=\"token operator\">=</span> <span class=\"token string\">\"heart_time\"</span></code></pre></div>\n<p>다음과 같은 새로운 M2M 컬럼을 생성해주려고했다.</p>\n<p>하지만 장고는 이미 생성된 모델을 임의로 수정하는 걸 가만 두지 않는다.  </p>\n<p>위의 모델에서 hearts라는 항목을 바꾸고 migrate를 해버리면 에러속으로 빠지게될것이다.</p>\n<p>이를 피하기 위해 hearts2라는 값으로 새로 아래에 선언을 해주고 related_name도 겹치지 않게 해주자.</p>\n<p>그 후 migrate 과정을 통해 해당 값을 갱신 시켜주고 기존의 hearts를 삭제하고 다시 migrate를 하자.  </p>\n<p>migrate를 완료 한 후에 이제 hearts2라는 변수명을 원래 처음 값인 heart라는 이름으로 변경하자.  </p>\n<p>이 과정을 거치면 깔끔하게 수정할 수 있다.  </p>\n<p>hearts2로 두고 기존의 것을 지우지 않아도 되지만, 이 방법은 쓸모없는 code를 남겨두는 것이므로 안좋은 방법이고, 다른 사람이 봤을땐 hearts는 뭐고 hearts2는 뭐지?라고 생각할 수 있기 때문에, 깔끔하게 수정하도록 하자.</p>\n<p><strong>항상 makemigration 후에 sqlmigration 을 사용하여 생성된 migrate 파일에 에러가 없는지 확인하고 migrate를 하도록 하자.</strong></p>","fields":{"slug":"/20190508TIL/","prefix":"2019-05-08"},"frontmatter":{"title":"float,int 차이, json인코딩, 디코딩, json(), M2M테이블 컬럼 추가","author":"KyleXID","category":"TIL","cover":{"childImageSharp":{"resize":{"src":"/static/django-logo-negative-1d528e2cb5fbc29ad16c74e5d883c371-160fa.png"}}}}},"authornote":{"id":"23c79ddc-82aa-5899-b07b-ef138c6177bc","html":"<p><strong>KyleXID</strong> 파이썬,장고를 기반으로 개발하고있는 백엔드 개발자입니다.<br>\n현재 P2P금융 업체에서 웹개발을 맡고 있습니다.</p>"},"site":{"siteMetadata":{"facebook":{"appId":"2287464308006637"}}}},"pageContext":{"slug":"/20190508TIL/","prev":{"id":"1352124f-635f-5e66-b43b-ce84af24b249","fields":{"slug":"/20190507TIL/","prefix":"2019-05-07","source":"posts"},"frontmatter":{"title":"Queryset의 반복구문 지우기, UnitTest 정리, List속 Dictionary 정렬","category":"TIL"}},"next":{"id":"6dd3d74b-5b36-5153-8287-b60d9877f7d5","fields":{"slug":"/20190509TIL/","prefix":"2019-05-09","source":"posts"},"frontmatter":{"title":"코드 정리, 파이썬 get함수, hasattr","category":"TIL"}},"source":"posts"}}