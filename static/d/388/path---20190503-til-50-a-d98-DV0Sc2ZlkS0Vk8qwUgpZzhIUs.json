{"data":{"post":{"id":"3116a4ab-b989-5d14-8455-a86b36f10b71","html":"<h1>python에서 for이나 while문에서 list에 접근하기</h1>\n<p>python에서 list에 for 문을 사용할 때, javascript처럼 Array의 각 요소별로 접근하는 방법이 있다.</p>\n<p>python에서 for를 사용할 경우</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></code></pre></div>\n<p>이렇게 하면 javascript의</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>와 같다.</p>\n<p>while을 사용하는 경우에는 </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">number <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">while</span> number <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">:</span>\n\n    <span class=\"token operator\">~</span> logic <span class=\"token operator\">~</span>\n\n    number <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></code></pre></div>\n<p>처럼 만들면 된다.</p>\n<br/>\n<h1>git stash TIP</h1>\n<p>가끔 github를 통해 프로젝트를 진행하다보면, master branch로 바꿔야하는 상황이 생겼을 때, 수정사항이 있어서 branch checkout이 안되는 경우가 있다.  </p>\n<p>이때 commit을 하지않고 수정사항을 임시 저장하는 방법이 있는데, 그게 stash이다.  </p>\n<p><code class=\"language-text\">git stash</code>를 하면 임시로 수정사항을 저장해 놓을 수가 있어서 marter branch에서 merge도 가능하다.  </p>\n<p>임시 저장된 목록을 보고싶다면 <code class=\"language-text\">git stash list</code>를 입력,  </p>\n<p>임시 저장된 수정사항을 불러 올때는 <code class=\"language-text\">git stash pop</code>을 입력하면 된다.</p>\n<br/>\n<h1>DATABASE 정리</h1>\n<ul>\n<li>영구보존 : 디스크에 ,파일에 저장</li>\n<li>데이터베이스는 파일과는 다르게 검색 및 다양한 관리기능이 가능하기 때문에 데이터베이스에 저장한다.\n<br/></li>\n</ul>\n<h3>관계형 데이터베이스</h3>\n<p><em>ex) 왜 트윗은 유저에 넣지않을까?<br>\n트윗은 여러개기때문에 유저 테이블에 들어가면 한개밖에안됨\n포린키로 연결함</em></p>\n<ul>\n<li>\n<p>왜 굳이 이런식으로 연결 하는가?</p>\n</li>\n<li>\n<p>데이터 저장공간</p>\n</li>\n<li>\n<p>데이터 완전성</p>\n</li>\n<li>\n<p>데이터 소스가 정해져있고 거기에 따른 id로만 하기때문에 잘못 입력될 경우가 없다.</p>\n</li>\n<li>\n<p>데이터 변할때 편리하게</p>\n</li>\n<li>\n<p>One to One</p>\n</li>\n<li>\n<p>One to Many</p>\n</li>\n<li>\n<p>Many to Many\n<em>ex) user1이 다양한 옷에 heart를 표시할 수 있다.<br>\n다양한 옷을 다양한 user들이 heart를 표시할 수 있다.</em></p>\n</li>\n</ul>\n<p><strong>중요한 속성</strong></p>\n<ul>\n<li>\n<p>ACID</p>\n<ul>\n<li>원자성, 일관성, 고립성, 지속성</li>\n</ul>\n</li>\n<li>\n<p>트랜잭션</p>\n<ul>\n<li>과정중 하나라도 실패하면 롤백해서 복구시키는 것, 모두다 성공해야 저장</li>\n<li><em>ex)오늘 뭐입지 프로젝트에서 유저 설정을 다 지우고 덮어씌우는 형식</em></li>\n</ul>\n</li>\n</ul>\n<h3>NoSQL 데이터베이스</h3>\n<ul>\n<li>다른 말로 문서 데이터베이스라고도 말함 column 자체가 없음, 아무거나 저장 가능.</li>\n<li>일반적으로 트랜잭션 서포트가 안됨.</li>\n</ul>\n<p><strong>내 시스템에서 어느 것이 더 적당하냐의 차이일 뿐이지 뭐가 더 좋고 나쁨은 없다</strong></p>\n<br/>\n<h3>NoSQL DB 팁</h3>\n<ul>\n<li>\n<p>천명 유저만 가용할 수 있는 DB에 만명이 더들어와서 포용할수가없다 -> DB확장 scale out!</p>\n</li>\n<li>\n<p>관계형 DB의 경우 1000개 쓰다 만명 받는 경우, NoSQL처럼 10개를 더 붙인다고 해서 동일한 효과를 나타내지 못한다.  </p>\n<ul>\n<li>이유는? 테이블 구조는 똑같으나 데이터는 모두 나누어서 들어가있기 때문에, 아무리 서버가 많아도 트랜잭션이 걸려있기 때문이다.</li>\n<li>그럼 어떻게 scale 을 키울까? -> scale up을 해준다 ->서버를 멈출 수 없기 때문에 같은걸 만들어서 그걸로 임시로 돌리고 원본을 키우고 다시 교체하는 형식, 그 사이 간극으로 데이터가 생기면 그것도 매꿔줘야한다.</li>\n<li>돌아가는 cpu에 확장하면 감전걸림</li>\n<li>AWS사용해서 다른기능으로 쓰다가 필요할때 더해주고 더해주고하는 방식도 존재한다.</li>\n</ul>\n</li>\n</ul>\n<br/>\n<h1>SQL 기초</h1>\n<ul>\n<li>CONSTRAINT란? 넣는 값이 아무값이나 넣는것이아닌, 포린키로 걸어주는 해당 id값 외에는 들어가지못하게 제한하는 것</li>\n</ul>","fields":{"slug":"/20190503TIL/","prefix":"2019-05-03"},"frontmatter":{"title":"DATABASE, python list에 접근하기, git stash","author":"KyleXID","category":"TIL","cover":{"childImageSharp":{"resize":{"src":"/static/django-logo-negative-1d528e2cb5fbc29ad16c74e5d883c371-160fa.png"}}}}},"authornote":{"id":"23c79ddc-82aa-5899-b07b-ef138c6177bc","html":"<p><strong>KyleXID</strong> 파이썬,장고를 기반으로 개발하고있는 백엔드 개발자입니다.<br>\n현재 P2P금융 업체에서 웹개발을 맡고 있습니다.</p>"},"site":{"siteMetadata":{"facebook":{"appId":"2287464308006637"}}}},"pageContext":{"slug":"/20190503TIL/","prev":{"id":"5b6c7ab0-ad50-5db4-ac91-ad4957d8fdaf","fields":{"slug":"/20190502TIL/","prefix":"2019-05-02","source":"posts"},"frontmatter":{"title":"엔드포인트 url 작성팁, 코드 정리","category":"TIL"}},"next":{"id":"b766930c-6752-54cb-a447-91424b6d2f3a","fields":{"slug":"/20190506TIL/","prefix":"2019-05-06","source":"posts"},"frontmatter":{"title":"ManyToMany테이블 value 추출,query to json, list of dictionaty","category":"TIL"}},"source":"posts"}}