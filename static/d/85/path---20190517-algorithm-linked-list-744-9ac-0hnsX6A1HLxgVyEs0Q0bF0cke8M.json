{"data":{"post":{"id":"78102370-6141-569a-81c1-bb87c06c28bc","html":"<h2>링크드 리스트란?</h2>\n<hr>\n<h4>링크드 리스트는 각 node가 데이터와 포인터를 갖고 한 줄로 연결되어 있는 방식으로 데이터를 저장하는 자료 구조이다.</h4>\n<ul>\n<li>node : 데이터상자. 주로 class로 구현된다.</li>\n<li>link : 각 데이터를 연결하여 리스트의 순서를 유지할 수 있게 해준다.</li>\n</ul>\n<p><img src=\"./linked.png\"> </p>\n<h3>Doubly Linked List</h3>\n<ul>\n<li>\n<p>Single Linked List와는 다르게 before의 노드의 link도 가지고 있는 리스트이다.</p>\n<ul>\n<li>리스트의 앞, 뒤 모두 이동이 가능하다.</li>\n</ul>\n</li>\n</ul>\n<h3>Circular Linked List</h3>\n<ul>\n<li>\n<p>List의 head와 tail이 연결되어 있는 리스트이다.</p>\n<ul>\n<li>리스트의 무한 반복이 가능하다.</li>\n</ul>\n</li>\n</ul>\n<h3>Array와의 차이</h3>\n<ul>\n<li>\n<p>요소를 순차적으로 저장하나 차이점이 있다.</p>\n<ul>\n<li>배열은 인덱스가 있기 때문에 인덱스를 알면 바로 접근이 가능하다. 반면 링크드 리스트는 해당 위치로 가기위해서는 연결된 링크를 따라 차근차근 접근 해야 한다.</li>\n</ul>\n</li>\n<li>\n<p>Array는 물리적 주소가 순차적이고 링크드 리스트는 순차적이지 않다.</p>\n<ul>\n<li>Array와 링크드 리스트는 데이터가 논리적 순서에 따라 순차적으로 입력된다는 공통점이 있다.</li>\n</ul>\n</li>\n<li>\n<p>Array는 데이터의 변화에 취약하다. 가장 마지막에 삽입될 경우에는 한번만 늘어나면 되지만, 그 외의 위치에 삽입 될 경우에는 그 다음부터 모든 데이터의 위치를 변경해야 하기 때문이다.</p>\n<ul>\n<li>링크드 리스트는 연결 주소만 바꾸어주면 되기때문에 간단하다.</li>\n</ul>\n</li>\n<li>\n<p>같은 양의 데이터를 저장할 경우에 링크드 리스트가 Array보다 더 많은 메모리를 차지한다.</p>\n<ul>\n<li>링크드 리스트는 각 노드별로 객체를 생성해야하기 때문</li>\n</ul>\n</li>\n</ul>\n<h3>언제 링크드 리스트를 사용하는가?</h3>\n<ul>\n<li>데이터의 양이 적고, 데이터의 변화가 빈번할 경우</li>\n<li>반대는 Array가 유리하다.</li>\n</ul>\n<h4>다음은 싱글 링크드 리스트의 예제이다.</h4>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    self<span class=\"token punctuation\">.</span>data   <span class=\"token operator\">=</span> data\n    self<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>   <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyLinkedList</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  \n  <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">print_list</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  \n    temp <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head  \n\n    <span class=\"token keyword\">while</span> temp<span class=\"token punctuation\">:</span>\n      temp <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"End\"</span><span class=\"token punctuation\">)</span>\n      \n  <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#index번째 node의 value를 반환한다. 값이 없으면 -1을 반환.</span>\n    cur <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n    i   <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    \n    <span class=\"token keyword\">while</span> i <span class=\"token operator\">!=</span> index<span class=\"token punctuation\">:</span>\n      i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n      cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n    \n    <span class=\"token keyword\">if</span> cur<span class=\"token punctuation\">.</span>data <span class=\"token operator\">==</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n    <span class=\"token keyword\">return</span> cur<span class=\"token punctuation\">.</span>data\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">addAtHead</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#리스트의 맨 앞에 value가 val인 node를 추가한다.</span>\n                            <span class=\"token comment\">#이는 리스트의 head가 된다.</span>\n    newhead <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span>\n    temp    <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n    \n    self<span class=\"token punctuation\">.</span>head \t   <span class=\"token operator\">=</span> newhead\n    self<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> temp\n    \n  <span class=\"token keyword\">def</span> <span class=\"token function\">addAtTail</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    newtail <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span>\n    \n    cur <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n    \n    <span class=\"token keyword\">while</span> cur<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n      cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n      \n    cur<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> newtail\n\n  <span class=\"token keyword\">def</span> <span class=\"token function\">addAtIndex</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#리스트의 마지막에 value가 val인 node를 추가한다.</span>\n    cur <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n    i \t<span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    \n    <span class=\"token keyword\">if</span> index <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n      self<span class=\"token punctuation\">.</span>addAtHead<span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">while</span> i <span class=\"token operator\">!=</span> index<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n      i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n      cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n      \n    <span class=\"token keyword\">if</span> cur<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n      self<span class=\"token punctuation\">.</span>addAtTail<span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n      new      <span class=\"token operator\">=</span> Node<span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span>\n      new<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n      cur<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> new\n        \n  <span class=\"token keyword\">def</span> <span class=\"token function\">deleteAtIndex</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#리스트의 index번째 node를 삭제한다.</span>\n      i   <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n      cur <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head\n\n      <span class=\"token keyword\">if</span> index <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        \n      <span class=\"token keyword\">while</span> i <span class=\"token operator\">!=</span> index<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n        \n      <span class=\"token keyword\">if</span> cur <span class=\"token operator\">==</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n      \n      cur<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n \n  <span class=\"token keyword\">def</span> <span class=\"token function\">reverseList</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#리스트의 순서를 뒤집어서 반환한다.</span>\n      cur    <span class=\"token operator\">=</span> head\n      before <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n      <span class=\"token keyword\">while</span> cur <span class=\"token operator\">!=</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        after <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span>\n    \n        cur<span class=\"token punctuation\">.</span><span class=\"token builtin\">next</span> <span class=\"token operator\">=</span> before\n        before <span class=\"token operator\">=</span> cur\n    \n        cur <span class=\"token operator\">=</span> after\n\n      head <span class=\"token operator\">=</span> before\n  \n      <span class=\"token keyword\">return</span> head\n </code></pre></div>","fields":{"slug":"/20190517algorithm_Linked_List/","prefix":"2019-05-17"},"frontmatter":{"title":"Linked List","author":"KyleXID","category":"Algorithm","cover":{"childImageSharp":{"resize":{"src":"/static/linked-e78b449fbe584e55a0770379a62e3783-160fa.png"}}}}},"authornote":{"id":"23c79ddc-82aa-5899-b07b-ef138c6177bc","html":"<p><strong>KyleXID</strong> 파이썬,장고를 기반으로 개발하고있는 백엔드 개발자입니다.<br>\n현재 P2P금융 업체에서 웹개발을 맡고 있습니다.</p>"},"site":{"siteMetadata":{"facebook":{"appId":"2287464308006637"}}}},"pageContext":{"slug":"/20190517algorithm_Linked_List/","next":{"id":"4cbcc4c2-4c17-5b3f-998d-2baa248dedda","fields":{"slug":"/20190517TIL/","prefix":"2019-05-17","source":"posts"},"frontmatter":{"title":"장고 get_or_create","category":"TIL"}},"source":"posts"}}