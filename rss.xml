<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[몬스터코딩 - 백엔드 블로그]]></title><description><![CDATA[백엔드 개발공부하는 블로그입니다.]]></description><link>https://kylexid.github.io</link><generator>RSS for Node</generator><lastBuildDate>Tue, 02 Jul 2019 15:57:24 GMT</lastBuildDate><item><title><![CDATA[20190620 TIL]]></title><description><![CDATA[동시에 request가 올 경우 데이터를 처리하는 방법에 대해,, queue를 이용하여 데이터를 쌓고 하나씩 처리하는 방법이 있다. transaction 자체가 lock의 역할을 할 수 있다.]]></description><link>https://kylexid.github.io/20190620TIL/</link><guid isPermaLink="false">https://kylexid.github.io/20190620TIL/</guid><pubDate>Thu, 20 Jun 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h3&gt;동시에 request가 올 경우 데이터를 처리하는 방법에 대해,,&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;queue를 이용하여 데이터를 쌓고 하나씩 처리하는 방법이 있다.&lt;/li&gt;
&lt;li&gt;transaction 자체가 lock의 역할을 할 수 있다.&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[20190619 TIL]]></title><description><![CDATA[장고 datetime 필드에 값 입력하기 python datetime을 사용하여 하는 방법에 대해 알게되었다. 가장 위의 pytz라이브러리는 파이썬 datetime으로 위와같이 값을 입력할 시 timezone설정이 안되기 때문에, pytz…]]></description><link>https://kylexid.github.io/20190619TIL/</link><guid isPermaLink="false">https://kylexid.github.io/20190619TIL/</guid><pubDate>Wed, 19 Jun 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h3&gt;장고 datetime 필드에 값 입력하기&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;python datetime을 사용하여 하는 방법에 대해 알게되었다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;exposure_product&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;pytz&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;utc&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;localize&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
datetime&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;datetime&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;strptime&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    product_dict&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;exposure_product&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token string&quot;&gt;&quot;%Y-%m-%d %H:%M&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;가장 위의 pytz라이브러리는 파이썬 datetime으로 위와같이 값을 입력할 시 timezone설정이 안되기 때문에, pytz를 import하여 로컬라이즈를 해준다.&lt;br&gt;
&lt;a href=&quot;https://stackoverflow.com/questions/34817109/python-string-to-django-timezone-aware-datetime&quot;&gt;관련 스택오버플로우&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;장고 모델링시 choices 사용은 언제하면 좋을까.&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;일반적으로 choices를 사용은, 많은 변화가 없는 정적인 데이터를 선택하게 할 때 사용하자.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;장고 help_text&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;필드 옵션으로, 장고 폼 위젯에 보이게 하는 옵션이다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;필드가 폼에 사용되지 않더라도, 문서화에 유용하므로 사용하는것을 추천한다고 한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# 예시&lt;/span&gt;
help_text&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Please use the following format: &amp;lt;em&gt;YYYY-MM-DD&amp;lt;/em&gt;.&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;일반텍스트와 &lt;code class=&quot;language-text&quot;&gt;django.utils.html.escape()&lt;/code&gt;를 사용하여 HTML 특수 문자들을 이스케이프 처리할 수 있다.&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[20190618 TIL]]></title><description><![CDATA[파이썬 remind 파이썬 슬라이드에 대해 다시한번 기억하고 가자! 파이썬 코딩도장 에 대해 반대로 뒤집기  시퀀스 객체에 모두 사용 가능하다. 파이썬 2개의 딕셔너리 합치는 방법]]></description><link>https://kylexid.github.io/20190618TIL/</link><guid isPermaLink="false">https://kylexid.github.io/20190618TIL/</guid><pubDate>Tue, 18 Jun 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h3&gt;파이썬 remind&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;파이썬 슬라이드에 대해 다시한번 기억하고 가자!&lt;br&gt;
&lt;a href=&quot;https://dojang.io/mod/page/view.php?id=2208&quot;&gt;파이썬 코딩도장&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;a[::]&lt;/code&gt;에 대해&lt;br&gt;
반대로 뒤집기 &lt;code class=&quot;language-text&quot;&gt;[::-1]&lt;/code&gt;시퀀스 객체에 모두 사용 가능하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;파이썬 2개의 딕셔너리 합치는 방법&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;python&quot;&gt;&lt;pre class=&quot;language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# How to merge two dictionaries&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# in Python 3.5+&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;a&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;b&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; y &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;b&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;c&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; z &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;**&lt;/span&gt;y&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; z
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;c&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;a&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;b&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[20190617 TIL]]></title><description><![CDATA[파이썬 remind 정수 홀수 구분   홀수,   짝수이다. (나머지로 판별) float, int의 차이, 4.0과 4의 차이이다.  는 실수,  는 정수를 나타낸다. 장고 remind 로 가져온 쿼리문들은 for…]]></description><link>https://kylexid.github.io/20190617TIL/</link><guid isPermaLink="false">https://kylexid.github.io/20190617TIL/</guid><pubDate>Mon, 17 Jun 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h3&gt;파이썬 remind&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;정수 홀수 구분 &lt;code class=&quot;language-text&quot;&gt;x%2 == 1&lt;/code&gt; 홀수, &lt;code class=&quot;language-text&quot;&gt;x%2 == 0&lt;/code&gt; 짝수이다. (나머지로 판별)&lt;/li&gt;
&lt;li&gt;float, int의 차이, 4.0과 4의 차이이다. &lt;code class=&quot;language-text&quot;&gt;float&lt;/code&gt;는 실수, &lt;code class=&quot;language-text&quot;&gt;int&lt;/code&gt;는 정수를 나타낸다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;장고 remind&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;filter&lt;/code&gt;로 가져온 쿼리문들은 for문으로 하나하나 접근할 시 바로 딕셔너리 형태처럼 키값으로 접근 할 수 있다.&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;get&lt;/code&gt; 또는 &lt;code class=&quot;language-text&quot;&gt;filter[0]&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;filter.first()&lt;/code&gt;등으로 가져온 아이들은 &lt;code class=&quot;language-text&quot;&gt;__dict__&lt;/code&gt;로 변환하여 키값으로 접근할 수 있다.&lt;/li&gt;
&lt;li&gt;filter로 가져오는 쿼리 데이터가 많을 경우에 &lt;code class=&quot;language-text&quot;&gt;iterator()&lt;/code&gt;를 사용하자. 무조건 쓰는건 아니고, 데이터의 양이 많은 경우에 쓰도록하자. &lt;code class=&quot;language-text&quot;&gt;iterator()&lt;/code&gt;의 경우에는 한번 추출하면 사라지므로 사용하는 상황을 제대로 판단하여 사용하자.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;장고 update할 시 get과 filter의 차이&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;get: .update() 사용 불가, 해당 변수에 접근하여 값을 할당하고 &lt;code class=&quot;language-text&quot;&gt;save(update_fields=&amp;#39;~&amp;#39;, ...)&lt;/code&gt; 형식으로 해주어야 한다.&lt;/li&gt;
&lt;li&gt;filter: &lt;code class=&quot;language-text&quot;&gt;Post.objects.filter(id=?).update(...)&lt;/code&gt; 로 update 가능하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.djangoproject.com/en/2.2/ref/models/querysets/#update-or-create&quot;&gt;update&lt;em&gt;or&lt;/em&gt;create&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;장고 1.7 이상부터 지원하는 메서드이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;장고 디버그 툴 바&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;장고 디버그 툴바를 통해 쿼리를 효과적으로 사용하고있는지, 중복은 없는지 파악할 수 있다.&lt;br&gt;
&lt;a href=&quot;http://raccoonyy.github.io/using-django-querysets-effectively-translate/index.html&quot;&gt;장고 효과적으로 사용하기-raccoony님 블로그&lt;/a&gt;&lt;br&gt;
&lt;a href=&quot;http://raccoonyy.github.io/using-django-querysets-effectively-translate/index.html&quot;&gt;장고 디버그 툴바&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;soft&lt;em&gt;delete, hart&lt;/em&gt;delete&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;hard_delete: 데이터를 아예 삭제하는 것&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;soft_delete: 데이터를 지웠다고 표시만 해주는 것. 실제 데이터는 남아있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;일반적으로 데이터는 안지우고 지웠다고 표시해주는 soft_delete 방식이 자주 쓰인다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;RESTful API개발 시 DELETE 메서드&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;RESTful API 개발시 삭제엔드포인트를 만들 경우 DELETE 메서드를 사용하는 것이 RESTful API적인 개발 방식이고, 깔끔하다.&lt;/li&gt;
&lt;li&gt;굳이 사용을 강요할 필요는 없다. 큰 범위내에서는 post에 포함되기 때문에, 따로 post로 새로운 엔드포인트를 만들어도 무관하다.&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[20190615 TIL]]></title><description><![CDATA[장고 서버 돌릴 때 엔드포인트 관련 경고메세지 안뜨게 하는 법 장고 프레임워크를 사용하면서, 엔드포인트를 작성시 프로젝트단의 엔드포인트 주소 뒤에 ’/‘를 쓰지 않고 앱 urls.py…]]></description><link>https://kylexid.github.io/20190615TIL/</link><guid isPermaLink="false">https://kylexid.github.io/20190615TIL/</guid><pubDate>Sat, 15 Jun 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h3&gt;장고 서버 돌릴 때 엔드포인트 관련 경고메세지 안뜨게 하는 법&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;장고 프레임워크를 사용하면서, 엔드포인트를 작성시 프로젝트단의 엔드포인트 주소 뒤에 ’/‘를 쓰지 않고 앱 urls.py에서 앱앞에 ’/‘를 쓸 경우 다음과 같은 에러메서지를 출력한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;?: (urls.W002) Your URL pattern &amp;#39;^/logout$&amp;#39; has a regex beginning with a &amp;#39;/&amp;#39;. Remove this slash as it is unnecessary.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;이 에러를 피하기 위해서는 &lt;code class=&quot;language-text&quot;&gt;APPEND_SLASH = False&lt;/code&gt;를 settings.py에 추가해 주자.&lt;/li&gt;
&lt;li&gt;다른 방법으로는&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;SILENCED_SYSTEM_CHECKS = [&amp;#39;urls.W002&amp;#39;, &amp;#39;security.W019&amp;#39;]&lt;/code&gt;&lt;br&gt;
를 추가하는 방법이 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;장고 &lt;code class=&quot;language-text&quot;&gt;__str__&lt;/code&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;장고 어드민 내에서 표시방법을 변경해주고, 모델클래스의 객체의 문자열 표현을 리턴하는 메서드이다.&lt;/li&gt;
&lt;li&gt;default값은 모델 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;object (User object)&amp;gt;&lt;/code&gt;이런식으로 표현되어 객체를 알아보기 어렵기 때문에 정의해주는것이 편하다.&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[20190614 TIL]]></title><description><![CDATA[파이썬 setdefault() 는 딕셔너리에 key:value를 추가하는 메서드이다. 키만 지정할 경우  값을 value에 저장한다.  를 하면 키와 값을 저장할 수 있다. .sh 파일 sh…]]></description><link>https://kylexid.github.io/20190614TIL/</link><guid isPermaLink="false">https://kylexid.github.io/20190614TIL/</guid><pubDate>Fri, 14 Jun 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h3&gt;파이썬 setdefault()&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;setdefault(key)&lt;/code&gt;는 딕셔너리에 key:value를 추가하는 메서드이다. 키만 지정할 경우 &lt;code class=&quot;language-text&quot;&gt;None&lt;/code&gt;값을 value에 저장한다. &lt;code class=&quot;language-text&quot;&gt;setdefault(key, value)&lt;/code&gt;를 하면 키와 값을 저장할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;.sh 파일&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;sh파일을 통해 커맨드들을 미리 저장하고 실행시켜서 해당 커맨드를 입력할 수 있다.&lt;/li&gt;
&lt;li&gt;단, &lt;code class=&quot;language-text&quot;&gt;chmod&lt;/code&gt;를 통해 읽기 권한을 만들어 주는 것을 잊지 말자.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;# file.sh라는 파일에 u(유저)에게 x권한을 준다는 커맨드이다.
&amp;gt;&amp;gt;&amp;gt; chmod u+x file.sh  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;장고 select_related() 쿼리셋&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ForeignKey, OneToOneField 에서 활용할 수 있는 쿼리셋으로, 하나의 쿼리셋을 가져올때 미리 관련 객체까지 불러오는 메서드이다. prefetch&lt;em&gt;related()와 세트이다. prefetch&lt;/em&gt;related()는 M2M, M2O등 모든 관계에서 사용 가능 하다. 자세한것은 아래 블로그를 참조하고, 추후에 블로그에도 정리하도록하자.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wayhome25.github.io/django/2017/06/20/selected_related_prefetch_related/&quot;&gt;초보몽키님 블로그&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://jupiny.tistory.com/entry/selectrelated%EC%99%80-prefetchrelated&quot;&gt;jupiny님 블로그&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[20190613 TIL/파이썬 스터디]]></title><description><![CDATA[파이썬 더블언더스코어에 대해 Special Method , DUNDER Method…]]></description><link>https://kylexid.github.io/20190613TIL/</link><guid isPermaLink="false">https://kylexid.github.io/20190613TIL/</guid><pubDate>Thu, 13 Jun 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h3&gt;파이썬 더블언더스코어에 대해&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Special Method , DUNDER Method 라고 불리며, 파이썬에서 객체를 사용할 때 이 메서드를 이용하여 편하게 작업을 할 수 있다.  다양한 메서드들이 있기 때문에 어떤것들이 있는지 인지를 해놓는 것이 좋을것같다. 추후 포스팅으로 정리!&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;클래스에 대해 다시한번 정리&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;클래스, 객체지향언어의 꽃이라고 할 수 있는 개념이다. 추상화를 시키는데 유용한 방법이며, 비슷한 속성을 가진 객체를 묶어줄 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;파이썬 캡슐화&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;클래스에 대해 스터디원들과 말하면서 파이썬 캡슐화에 대한 이야기가 나와서 이야기하게 되었다.&lt;br&gt;
정보은닉은 public, protected, private가 있으며, 기본적으로 파이썬은 public상태이다.&lt;br&gt;
(클래스 외부에서 속성, 메서드에 접근이 가능)  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;protected는 파이썬에서 실제로 접근을 막거나 하진 않고 경고수준에서 끝난다.  &lt;/li&gt;
&lt;li&gt;private는 외부에서 접근이 불가능하고, 속성이름 앞에 Dunder를 붙여주면 된다.
name mangling을 통해 private 설정가능하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;함수에 대해 다시한번 정리&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;함수는 반복적으로 사용되는 코드를 정리하여 작업을 효율적으로하고 코딩을 깔끔하게 하는 역할을 해준다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;딕셔너리에 대해 다시한번 정리&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;키와 밸류를 한 쌍으로 갖는 자료형, 말그대로 사전과 비슷하다고 생각하면 된다. 영한사전으로 비교했을때 dog은 key, 강아지는 value이다.&lt;/li&gt;
&lt;li&gt;딕셔너리는 리스트나 튜플처럼 sequential(순차적)으로 값을 구하는 것이 아니라, key를 통해서 바로 접근 가능하다. &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;파이썬 이터러블, 이터레이터, 제너레이터&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;파이썬 iterable, iterator, generator에 대해서는 다시한번 포스팅으로 정리하는게 좋을것 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;iterable: 요소를 하나씩 차례로 반환가능한 객체를 의미함.(list, string, tuple / dict, file, set)&lt;/li&gt;
&lt;li&gt;iterator: &lt;code class=&quot;language-text&quot;&gt;next()&lt;/code&gt;메서드를 사용하여 순차적으로 호출가능한 객체, 이터러블을 이터레이터로 만들어주기위해서는 &lt;code class=&quot;language-text&quot;&gt;iter()&lt;/code&gt;함수를 사용하면 된다.&lt;/li&gt;
&lt;li&gt;generator: 이터레이터의 한 종류, 다수의 연속적인 데이터를 갖고있지만,  한번 호출할때 하나의 값만 리턴한다. 데이터의 수가 많아질수록 메모리적으로 효율적인 성능을 보여준다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item></channel></rss>